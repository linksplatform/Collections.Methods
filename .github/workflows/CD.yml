name: CD

on:
  push:
    branches: master
  pull_request:
    branches: master

env:
  NUGETTOKEN: ${{ secrets.NUGETTOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/master/MultiProjectRepository

jobs:
  testAndDeploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Remove Cpp projects
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        dotnet sln "Platform.$REPOSITORY_NAME.sln" remove cpp/Platform.$REPOSITORY_NAME.Tests/Platform.$REPOSITORY_NAME.TemplateLibrary.Tests.vcxproj cpp/Platform.$REPOSITORY_NAME.Tests.Console/Platform.$REPOSITORY_NAME.TemplateLibrary.Tests.Console.vcxproj
    - name: Test
      run: dotnet test -c Release -f netcoreapp3.0
    - name: Generate PDF with CSharp code
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
        wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
        wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
        bash ./generate-csharp-pdf.sh
    - name: Publish CSharp documentation to gh-pages branch
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/docfx.json"
        wget "$SCRIPTS_BASE_URL/filter.yml"
        wget "$SCRIPTS_BASE_URL/toc.yml"
        wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
        bash ./publish-csharp-docs.sh
    - name: Publish CSharp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
        bash ./push-csharp-nuget.sh
    - name: Publish Cpp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-cpp-nuget.sh"
        bash ./push-cpp-nuget.sh
    - name: Publish release
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/publish-release.sh"
        bash ./publish-release.sh

  pushCSharpNuGetToGitHubPackageRegistry:
    needs: testAndDeploy
    if: github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Remove Cpp projects
        run: |
          dotnet sln "Platform.Interfaces.sln" remove cpp/Platform.Collections.Methods.Tests/Platform.Collections.Methods.TemplateLibrary.Tests.vcxproj cpp/Platform.Collections.Methods.Tests.Console/Platform.Collections.Methods.TemplateLibrary.Tests.Console.vcxproj
      - uses: warrenbuckley/Setup-Nuget@v1
      - name: Publish CSharp NuGet to GitHub Package Registry
        run: |
          dotnet build -c Release
          dotnet pack -c Release
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/linksplatform/index.json" -UserName linksplatform -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "GitHub" -SkipDuplicate
